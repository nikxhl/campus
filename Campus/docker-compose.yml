version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: campus_events_db
    environment:
      POSTGRES_DB: campus_event_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: campus_events_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "5432:5432"
    networks:
      - campus_events_network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: campus_events_api
    environment:
      PORT: 5000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: campus_event_db
      DB_USER: postgres
      DB_PASS: campus_events_password
      NODE_ENV: production
    ports:
      - "5000:5000"
    depends_on:
      - postgres
    networks:
      - campus_events_network
    restart: unless-stopped
    volumes:
      - ./backend/uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: campus_events_frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - campus_events_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: campus_events_redis
    ports:
      - "6379:6379"
    networks:
      - campus_events_network
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  campus_events_network:
    driver: bridge
